<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端总结(1)</title>
      <link href="/2020/06/09/2020610-fen-xiang/"/>
      <url>/2020/06/09/2020610-fen-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="一、css"><a href="#一、css" class="headerlink" title="一、css:"></a>一、css:</h1><h2 id="1-弹性盒子"><a href="#1-弹性盒子" class="headerlink" title="1. 弹性盒子"></a>1. 弹性盒子</h2><p><strong>1.1 定义弹性盒子</strong></p><p>下面的代码实际就是实现了弹性盒子，将标签的display属性设置为flex，就是生成一个弹性盒子，注意这个时候浮动就失效了，浮动在弹性盒子中是没有效果的</p><pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bigDiv"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"smallDiv"</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"smallDiv"</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"smallDiv"</span><span class="token operator">&gt;</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"smallDiv"</span><span class="token operator">&gt;</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"smallDiv"</span><span class="token operator">&gt;</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token punctuation">.</span>bigDiv<span class="token punctuation">{</span>            width<span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>            height<span class="token punctuation">:</span> 10vh<span class="token punctuation">;</span>            display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token punctuation">:</span> #CCCCCC<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>smallDiv<span class="token punctuation">{</span>            width<span class="token punctuation">:</span> 5vw<span class="token punctuation">;</span>            height<span class="token punctuation">:</span> 5vh<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token punctuation">:</span> #<span class="token number">999999</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span></code></pre><p><img src="https://codePupil1.github.io/post-images/1591705991224.png" alt=""><br><img src="https://gitee.com/guaiwolo/blogImgPicGoPub/raw/master/blogImg/demo/7837154.jpeg" alt=""><br><strong>1.2 flex-direction(设置排版方向)(==容器属性==)</strong></p><p>flex-direction的值有以下四种：</p><ul><li>row：<br>横向从左到右排列（左对齐），默认的排列方式。</li><li>row-reverse：<br>反转横向排列（右对齐，从后往前排，最后一项排在最前面。</li><li>column：<br>纵向排列。</li><li>column-reverse：<br>反转纵向排列，从后往前排，最后一项排在最上面。</li></ul><p>可以自己尝试一下。</p><p><strong>1.3 justify-content(设置容器的内容在主轴的对齐方式)(==容器属性==)</strong></p><p>justify-content的值如下：</p><ul><li>flex-start：<br>弹性项目向行头紧挨着填充。这个是默认值。</li><li>flex-end：<br>弹性项目向行尾紧挨着填充。</li><li>center：<br>弹性项目居中紧挨着填充。</li><li>space-between：<br>弹性项目平均分布在该行上。</li><li>space-around：<br>弹性项目平均分布在该行上，两边留有一半的间隔空间。如果剩余空间为负或者只有一个弹性项，则该值等同于center。否则，弹性项目沿该行分布，且彼此间隔相等</li></ul><p><strong>1.4 align-items(设置容器的内容在副轴的对齐方式)(==容器属性==)</strong><br>align-items常用的值如下：</p><ul><li>flex-start：<br>弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。</li><li>flex-end：<br>弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。</li><li>center：<br>弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。</li></ul><p><strong>1.5 flex-wrap(设置容器内容超出是否换行)(==容器属性==)</strong><br>flex-wrap常用的值如下：</p><ul><li>nowrap - 默认， 弹性容器为单行。该情况下弹性子项可能会溢出容器。</li><li>wrap - 弹性容器为多行。该情况下弹性子项溢出的部分会被放置到新行，子项内部会发生断行</li><li>wrap-reverse -反转 wrap 排列。</li></ul><h3 id="2-单位"><a href="#2-单位" class="headerlink" title="2. 单位"></a>2. 单位</h3><h3 id="3-边框"><a href="#3-边框" class="headerlink" title="3. 边框"></a>3. 边框</h3><h3 id="4-calc计算"><a href="#4-calc计算" class="headerlink" title="4. calc计算"></a>4. calc计算</h3><h3 id="5-选择器权重"><a href="#5-选择器权重" class="headerlink" title="5. 选择器权重"></a>5. 选择器权重</h3><h3 id="6-实现容器内水平垂直居中的方式"><a href="#6-实现容器内水平垂直居中的方式" class="headerlink" title="6. 实现容器内水平垂直居中的方式"></a>6. 实现容器内水平垂直居中的方式</h3><h2 id="二、js"><a href="#二、js" class="headerlink" title="二、js"></a>二、js</h2><h3 id="1-文件操作"><a href="#1-文件操作" class="headerlink" title="1. 文件操作"></a>1. 文件操作</h3><h3 id="2-于"><a href="#2-于" class="headerlink" title="2. ==于==="></a>2. ==于===</h3><h3 id="3-工具类"><a href="#3-工具类" class="headerlink" title="3. 工具类"></a>3. 工具类</h3><h3 id="4-正则的使用"><a href="#4-正则的使用" class="headerlink" title="4. 正则的使用"></a>4. 正则的使用</h3><h3 id="5-ajax的同步异步"><a href="#5-ajax的同步异步" class="headerlink" title="5. ajax的同步异步"></a>5. ajax的同步异步</h3><h3 id="6-数组的小技巧"><a href="#6-数组的小技巧" class="headerlink" title="6. 数组的小技巧"></a>6. 数组的小技巧</h3><h3 id="7-递归"><a href="#7-递归" class="headerlink" title="7. 递归"></a>7. 递归</h3><p>递归可能会出现堆栈溢出的现象</p><pre class=" language-js"><code class="language-js"></code></pre><h2 id="三、框架"><a href="#三、框架" class="headerlink" title="三、框架"></a>三、框架</h2><ol><li>vue.js</li><li>element.js</li></ol><h2 id="四、个人博客"><a href="#四、个人博客" class="headerlink" title="四、个人博客"></a>四、个人博客</h2><ol><li>Gridea</li><li>github</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
